// -----------------------------------number_1------------------------------


#### 1) What is the difference between var, let, and const?

Ans: Javascript var , let , const, are all used to declare variables, but they are behave differently in terms of scope ,re-declaration , and mutability. so  let know to difference,

1: var 

     #scope:Function-scoped,
     #Hosting: hoisted to the top of its scope and initialized as undefined,
     #usage: Considered outdated; can cause bugs due to its scope and hoisting behavior.
     #Re-declaration: Allowed in the same scope.

2: let
    
     #Scope: Block-scoped (accessible only within { ... } where declared).
     #Re-declaration: Not allowed in the same scope.
     #Hoisting: Hoisted but not initialized (in temporal dead zone until defined).
     #Usage: Use when the variable value needs to change.



3:const

     #Scope: Block-scoped (like let).
     #Re-declaration: Not allowed in the same scope.
     #Hoisting: Hoisted but not initialized (same temporal dead zone as let).
     #Mutability: Must be assigned a value when declared, cannot be re-assigned.
     #Usage: Use when the variable should not be reassigned (but note: objects/arrays can still be modified).



// -----------------------------------number_2------------------------------

#### 2) What is the difference between map(), forEach(), and filter()? 

Ans:(map(), forEach(), and filter()) They are all array methods in JavaScript. They works loop through an array but serve different purposes. so let know to all of them.

1: map()

   #Purpose: Transforms each element and returns a new array with the same length.
   #Return value: New array with modified values.
   #Usage: Best when you want to change data and use it later.


2:forEach()

    #Purpose: Execute a function for each element in an array.
    #Return value: Always undefined (doesnâ€™t create a new array).
    #Usage: Best when you just want to do something (e.g., log, update DOM) without returning anything.


3:filter()
#Purpose: Returns a new array containing only elements that pass a condition (true).
#Return value: New array.
#Usage: Best when you want to select specific items.



// -----------------------------------number_3------------------------------


#### 3) What are arrow functions in ES6?

Ans: just a new syntex for writing function useing the => arrow .it is very easy for devoloper beacuse function keyword , curly braces or return no need for .


// -----------------------------------number_4------------------------------


#### 4) How does destructuring assignment work in ES6?

Ans: 


1: Array Destructuring: 

    const numbers = [10, 20, 30];
    const a = numbers[0];
    const b = numbers[1];

const [x, y, z] = numbers;

console.log(x); 
console.log(y); 
console.log(z); 

2:objects Destructuring

const person = { name: "Mahfuz", age: 22 };
const { name, age } = person;
console.log(name); 
console.log(age);  

// -----------------------------------number_5------------------------------
// -----------------------------------number_5------------------------------
// -----------------------------------number_5------------------------------

#### 5) Explain template literals in ES6. How are they different from string concatenation?

Ans: Template literals are strings written with backticks (` `) instead of quotes (' or ")

This is basic template
//   const name = "Mahfuz"
//   const age = 22
//   const message = "Hello, my name is " + name + " and I am " + age + " years old.
//   console.log(message);
//   Output: Hello, my name is Mahfuz and I am 22 years old.

This is template literal:

// const text2 = `This is line 1
// This is line 2
// This is line 3`;
// console.log(text2);



